//
// Name: Clock
// Description: A fullscreen overlay of the current time in the real world.
//

include("location.js"); 
include("suncalc.js");

visible = true;
invisible = false;
v_fov = 20;
h_fov = v_fov*1.75; //Estimating Horizontial FOV. Assumes screen aspect ration of 2:1
//     core.debug('h_fov = ' + h_fov);

//Hide things
core.setGuiVisible(invisible);
try {
    MeteorShowers.setEnableLabels(false);
    Satellites.setFlagLabels(false);
} catch(e) {/*Ignore Failure*/}
//Set the display options
core.clear("natural");
//Setup default view
core.setObserverLocation(lon, lat, alt, 0, place, "");
StelMovementMgr.setInitFov(v_fov);
StelMovementMgr.setMaxFov(v_fov);
core.selectObjectByName("Sun", false);
//StelMovementMgr.setFlagTracking(true);
//Find the furthest east and west the sun will go while visible.
//https://astronomy.stackexchange.com/questions/24598/how-to-calculate-the-maximum-and-minimum-solar-azimuth-at-a-given-location
sunrise_max = 180.0 - degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
sunset_max = 180.0 + degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
max_azimuth_range = sunset_max - sunrise_max;
// core.debug('sunrise_max = ' + sunrise_max);
// core.debug('sunset_max = ' + sunset_max);
// core.debug('max_azimuth_range = ' + max_azimuth_range);

function get_display_time() {
    current_time = new Date;
    hours = (current_time.getHours()>12?current_time.getHours() - 12: current_time.getHours());
    minutes = current_time.getMinutes();
    seconds = current_time.getSeconds();
    display_time = (hours<10?(hours==0?"12":" "+hours):hours)+":"+(minutes<10?"0":"")+minutes;//+":"+seconds;
    return display_time;
}

function wait_till_next_minute() {
    current_time = new Date;
    seconds = current_time.getSeconds();
    core.wait(1);
}

function update_view() {
    core.selectObjectByName("Sun", false);
    sun = core.getSelectedObjectInfo();

    viewport_offset = 50 - (((sun["azimuth"] - sunrise_max)/max_azimuth_range)*100);
//    core.debug('viewport_offset = ' + viewport_offset);
    StelMovementMgr.setViewportHorizontalOffsetTarget(viewport_offset);
    StelMovementMgr.setViewportVerticalOffsetTarget(0);

//    core.moveToAltAzi(sun["altitude"], sun["azimuth"], 0);
    core.moveToAltAzi(7, sun["azimuth"], 0);
}

update_view();
//LabelMgr.labelHorizon("text", Azimuth, Altitude, visibility, font size, color);
//LabelMgr.labelScreen("text", x, y, visibility, font size, color);
time_day = LabelMgr.labelScreen(get_display_time(), -7, -33, invisible, 280, "#00FF00");
time_night = LabelMgr.labelScreen(get_display_time(), -7, -33, invisible, 280, "#1E73BE");
if (sun["altitude"] > -6) { //-6 is end of Civil Twilight
    LabelMgr.setLabelShow(time_day, visible);
    LabelMgr.setLabelShow(time_night, invisible);
} else {
    LabelMgr.setLabelShow(time_night, visible);
    LabelMgr.setLabelShow(time_day, invisible);
}
wait_till_next_minute();

while (true) {
    update_view();
    if (sun["altitude"] > -6 && !LabelMgr.getLabelShow(time_day)) { //-6 is end of Civil Twilight
    LabelMgr.setLabelShow(time_day, visible);
    LabelMgr.setLabelShow(time_night, invisible);
    } else if (sun["altitude"] <= -6 && !LabelMgr.getLabelShow(time_night)) {
    LabelMgr.setLabelShow(time_night, visible);
    LabelMgr.setLabelShow(time_day, invisible);
    }
    LabelMgr.setLabelText(time_day, get_display_time());
    LabelMgr.setLabelText(time_night, get_display_time());
    wait_till_next_minute();
}
LabelMgr.setLabelShow(time_day, invisible);
LabelMgr.setLabelShow(time_night, invisible);
LabelMgr.deleteLabel(time_day);
LabelMgr.deleteLabel(time_night);