//
// Name: Clock
// Description: A fullscreen overlay of the current time in the real world.
//

debug = false;

/* @ToDo
 * Update atmospheric conditions based on actual weather conditions. 
 * Rain notification (☂) @ 80%
 * Jacket notification (☃) @ 50°
 * Hot notification (♨) @ 90°
 * Sever Weather Warning (⚡)
 * All of this should be parsable in the US from 
 * https://forecast.weather.gov/MapClick.php?lat=[###]&lon=[###]&unit=0&lg=english&FcstType=dwml
 */

include("location.js");

visible = true;
invisible = false;
v_fov = 30;
h_fov = v_fov*1.75; //Estimating Horizontal FOV. Assumes screen aspect ration of 2:1
displayed_time = "";
tock = true;

//     core.debug('h_fov = ' + h_fov);

//Nice flat horizon
core.setProjectionMode("ProjectionPerspective");

//Hide things
core.setGuiVisible(invisible);
try {
    LandscapeMgr.setFlagIllumination(false);
    LandscapeMgr.setFlagLabels(false);
    LandscapeMgr.setFlagCardinalsPoints(false);
    MeteorShowers.setEnableLabels(false);
    Satellites.setFlagLabels(false);
} catch(e) {/*Ignore Failure*/}
//Set the display options
core.clear("natural");
//Setup default view
if(!debug) {
    core.setDate("now");
}
core.setObserverLocation(lon, lat, alt, 0, place, "");
StelMovementMgr.setInitFov(v_fov);
StelMovementMgr.setMaxFov(v_fov);

function get_date() {
    if (debug) {
        sim = core.getDate("local");
        temp = new Date();
        temp.setYear(sim.substring(0,4));
        temp.setMonth(sim.substring(5,7));
        temp.setDate(sim.substring(8,10));
        temp.setHours(sim.substring(11,13));
        temp.setMinutes(sim.substring(14,16));
        temp.setSeconds(sim.substring(17,19));
        return temp;
    } else {
        return new Date();
    }
}

function stellarium_to_javascript_time(sun_time){
    var t = get_date();  //Assume current date for time
    t.setHours(sun_time.substring(0,sun_time.indexOf("h")));		//Hours since midnight.
    t.setMinutes(sun_time.substring(sun_time.indexOf("h") + 1, sun_time.indexOf("m")));		//Minutes after the hour.
    t.setSeconds(0);		//Seconds after the minute.

    return t;
}
function radians(degrees) {
    return (Math.PI/180.0)*degrees;
}

function degrees(radians) {
    return (180.0/Math.PI)*radians;
}

//Expects start and end in "web" hex strings (i.e. #FFFFFF)
//Performs a 1D Linear fade between the two colors.
function color_fade(start, end, percent) {
    return "#" + 
                ("0"+(parseInt(start.substring(1,3), 16) + Math.round(percent*(parseInt(end.substring(1,3), 16) - parseInt(start.substring(1,3), 16)))).toString(16)).slice(-2) + //Red
                ("0"+(parseInt(start.substring(3,5), 16) + Math.round(percent*(parseInt(end.substring(3,5), 16) - parseInt(start.substring(3,5), 16)))).toString(16)).slice(-2) + //Green
                ("0"+(parseInt(start.substring(5,7), 16) + Math.round(percent*(parseInt(end.substring(5,7), 16) - parseInt(start.substring(5,7), 16)))).toString(16)).slice(-2);  //Blue
}

function get_display_time() {
    current_time = get_date();
    
    //Setup Sunset/Sunrise Countdown
    sunup=stellarium_to_javascript_time(sun["rise"]);
    sundown=stellarium_to_javascript_time(sun["set"]);

    seconds_till_sunset = Math.floor(sundown.getTime()/1000)-Math.floor(current_time.getTime()/1000);
    seconds_till_sunrise = Math.floor(sunup.getTime()/1000)-Math.floor(current_time.getTime()/1000);

    today = get_date();
    today.setHours(0);
    today.setMinutes(0);
    today.setSeconds(0);
    if (typeof countdown !== 'undefined' && countdown.getTime() > today.getTime()) {
        temp = get_date();
        time_left = countdown - temp;

        time_left=(time_left-(milliseconds=time_left%1000))/1000;
        time_left=(time_left-(seconds=time_left%60))/60;
        time_left=(time_left-(minutes=time_left%60))/60;
        days=(time_left-(hours=time_left%24))/24;

        if (days > 0) {
            display_time = days+":"+(hours<10?"0":"")+hours+":"+(minutes<10?"0":"")+minutes;//+":"+seconds;
        } else {
            display_time = (hours<10?"0":"")+hours+":"+(minutes<10?"0":"")+minutes+":"+(seconds<10?"0":"")+seconds;
        }
    } else {
        hours = (current_time.getHours()>12?current_time.getHours() - 12: current_time.getHours());
        minutes = current_time.getMinutes();
        seconds = current_time.getSeconds();
        display_time = (hours<10?(hours==0?"12":" "+hours):hours)+":"+(minutes<10?"0":"")+minutes;//+":"+seconds;
    }    
    return display_time;
}

function get_display_color() {
    current_time = get_date();
    current_month = current_time.getMonth() + 1;
    
    if (current_month == 12) { //Christmas Colors
        if (sun["altitude"] > 0) {
            return color_fade("#B3000C", "#0D5901", sun["altitude"]/90);
        } else if (sun["altitude"] > -18) { //-18 is the marker for Astronomical Twilight
            return color_fade("#00B32C", "#B3000C", (-sun["altitude"])/18);
        } else {
            return "#B3000C";
        }
    } else { //"Standard" Colors
        if (sun["altitude"] > 0) {
            return color_fade("#1E73BE", "#000000", sun["altitude"]/90);
        } else if (sun["altitude"] > -18) { //-18 is the marker for Astronomical Twilight
            return color_fade("#FFFFFF", "#1E73BE", (-sun["altitude"])/18);
        } else {
            return "#1E73BE";
        }
    }
}

function wait_till_next_tick() {
    //Wait is relative to Sim Time not Real time, try and tick exactly on the second.
    if (Math.round(core.getTimeRate()) == 0) {
        //Sim Time frozen. Resort to 1 second waits.
        /*core.debug((tock?"Tock ":"Tick ")+
        "Next "+(!tock?"Tock ":"Tick ")+" in 1 second (Time Currently Paused)");
        */
        core.wait(1);
    } else {
        wait_len = Math.abs((1*core.getTimeRate())/(core.getTimeRate()<=18 && core.getTimeRate()>=-18?core.getTimeRate():18));
        tock = !tock;
        /*core.debug((tock?"Tock ":"Tick ")+
                "Next "+(!tock?"Tock ":"Tick ")+" in "+(core.getTimeRate()<0?"- ":"+ ")+wait_len+' "seconds" '+
                'at roughly '+Math.abs(core.getTimeRate()<=18 && core.getTimeRate()>=-18?core.getTimeRate():18)+" fps");
*/
        core.waitFor((core.getTimeRate()<0?"- ":"+ ")+wait_len+" seconds", "utc");
    }
}

function get_twilight_icon() {
    if (sun["altitude"] >= -6 && sun["altitude"] <= 0) { //-6 is the marker for Civil Twilight
        return "⚫";
    } else if (sun["altitude"] >= -12 && sun["altitude"] < -6) { //-12 is the marker for Nautical Twilight
        return "⚓";
    } else if (sun["altitude"] >= -18 && sun["altitude"] < -12) { //-18 is the marker for Astronomical Twilight
        return "✴️";
    } else {
        return "";
    }
}

function update_view() {
    core.selectObjectByName("Sun", false);
    sun = core.getSelectedObjectInfo();

/*    StelSkyDrawer.setExtinctionCoefficient (double extCoeff)
 	Set extinction coefficient, mag/airmass (for extinction).
 
    StelSkyDrawer.setAtmosphereTemperature (double celsius)
 	Set atmospheric (ground) temperature in deg celsius (for refraction).
 
    StelSkyDrawer.setAtmospherePressure (double mbar)
    Get atmospheric (ground) pressure in mbar (for refraction)
*/
    viewport_offset = 50 - (((sun["azimuth"] - sunrise_max)/max_azimuth_range)*100);
//    core.debug('viewport_offset = ' + viewport_offset);
    StelMovementMgr.setViewportHorizontalOffsetTarget(viewport_offset);
    StelMovementMgr.setViewportVerticalOffsetTarget(0);

//    core.moveToAltAzi(sun["altitude"], sun["azimuth"], 0);
    core.moveToAltAzi(10, sun["azimuth"], 0);
}
//Setup Sun Tracking
core.selectObjectByName("Sun", false);
sun = core.getSelectedObjectInfo();

//StelMovementMgr.setFlagTracking(true);
//Find the furthest east and west the sun will go while visible.
//https://astronomy.stackexchange.com/questions/24598/how-to-calculate-the-maximum-and-minimum-solar-azimuth-at-a-given-location
sunrise_max = 180.0 - degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
sunset_max = 180.0 + degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
max_azimuth_range = sunset_max - sunrise_max;
// core.debug('sunrise_max = ' + sunrise_max);
// core.debug('sunset_max = ' + sunset_max);
// core.debug('max_azimuth_range = ' + max_azimuth_range);

//Setup Sunset/Sunrise Countdown
sunup=stellarium_to_javascript_time(sun["rise"]);
sundown=stellarium_to_javascript_time(sun["set"]);
// core.debug("Rise - " + sunup);
// core.debug("Set - " + sundown);

//Update where the viewer is pointed
update_view();

wait_till_next_tick();

while (true) {
    update_view();
    //LabelMgr.labelHorizon("text", Azimuth, Altitude, visibility, font size, color);
    //LabelMgr.labelScreen("text", x, y, visibility, font size, color);
    current_time = get_display_time();
    if (displayed_time != current_time) {
        if (typeof time_display !== 'undefined') {
            LabelMgr.deleteLabel(time_display);
        }
        time_left = 60500 - ((get_date()).getSeconds()*1000) - (get_date()).getMilliseconds();
        time_display = LabelMgr.labelScreen(current_time, 0, 0, visible, (core.getScreenWidth()*(current_time.length == 5?0.33:0.20)), get_display_color(), true, time_left);
        
        displayed_time = current_time;

        seconds_till_sunrise = Math.floor(sunup.getTime()/1000)-Math.floor((get_date()).getTime()/1000);
        if (typeof sunrise_countdown !== 'undefined') {
            LabelMgr.deleteLabel(sunrise_countdown);
        }
        if ((seconds_till_sunrise > 0 && seconds_till_sunrise <= 15*60) || (sun["azimuth"] < 180 && (sun["altitude"] <= 0 && sun["altitude"] >= -18))) {
            seconds_till_sunrise = (seconds_till_sunrise <= 15*60 ? seconds_till_sunrise : -1); 
            if (Math.floor(seconds_till_sunrise/60) > 12) {
                icon = "🌕";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunrise/60) > 9) {
                icon = "🌖";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunrise/60) > 6) {
                icon = "🌗";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunrise/60) > 3) {
                icon = "🌘";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunrise/60) > 0){
                icon = "🌑";
                icon_color = "#EEE4A7";
            } else {
                icon = get_twilight_icon();
                icon_color = get_display_color();
            }
            sunrise_countdown = LabelMgr.labelScreen(icon, (core.getScreenWidth()-(core.getScreenWidth()*0.18)), (core.getScreenHeight()*0.70), visible, (core.getScreenWidth()*0.09), icon_color, true, time_left);
        }

        seconds_till_sunset = Math.floor(sundown.getTime()/1000)-Math.floor((get_date()).getTime()/1000);
        if (typeof sunset_countdown !== 'undefined') {
            LabelMgr.deleteLabel(sunset_countdown);
        }
        if ((seconds_till_sunset > 0 && seconds_till_sunset <= 15*60) || (sun["azimuth"] > 180 && (sun["altitude"] <= 0 && sun["altitude"] >= -18))) {
            seconds_till_sunset = (seconds_till_sunset <= 15*60 ? seconds_till_sunset : -1);
            if (Math.floor(seconds_till_sunset/60) > 12) {
                icon = "🌑";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunset/60) > 9) {
                icon = "🌒";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunset/60) > 6) {
                icon = "🌓";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunset/60) > 3) {
                icon = "🌔";
                icon_color = "#EEE4A7";
            } else if (Math.floor(seconds_till_sunset/60) > 0) {
                icon = "🌕";
                icon_color = "#EEE4A7";
            } else {
                icon = get_twilight_icon();
                icon_color = get_display_color();
            }
            sunset_countdown = LabelMgr.labelScreen(icon, 0, (core.getScreenHeight()*0.70), visible, (core.getScreenWidth()*0.09), icon_color, true, time_left);
        } 

    }
    //Always tick at least once a second to prevent large jumps of background.
    wait_till_next_tick();
}