//
// Name: Clock
// Description: A fullscreen overlay of the current time in the real world.
//

/* @ToDo
 * Color Theme Changes for Special Dates
 * Rain notification
 * Jacket notification
 */

include("location.js"); 
include("suncalc.js");

visible = true;
invisible = false;
v_fov = 20;
h_fov = v_fov*1.75; //Estimating Horizontial FOV. Assumes screen aspect ration of 2:1
//     core.debug('h_fov = ' + h_fov);

//Hide things
core.setGuiVisible(invisible);
try {
    MeteorShowers.setEnableLabels(false);
    Satellites.setFlagLabels(false);
} catch(e) {/*Ignore Failure*/}
//Set the display options
core.clear("natural");
//Setup default view
core.setObserverLocation(lon, lat, alt, 0, place, "");
StelMovementMgr.setInitFov(v_fov);
StelMovementMgr.setMaxFov(v_fov);

//Setup Sun Tracking
core.selectObjectByName("Sun", false);
//StelMovementMgr.setFlagTracking(true);
//Find the furthest east and west the sun will go while visible.
//https://astronomy.stackexchange.com/questions/24598/how-to-calculate-the-maximum-and-minimum-solar-azimuth-at-a-given-location
sunrise_max = 180.0 - degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
sunset_max = 180.0 + degrees(Math.acos(-Math.sin(radians(23.5))/Math.cos(radians(lat))));
max_azimuth_range = sunset_max - sunrise_max;
// core.debug('sunrise_max = ' + sunrise_max);
// core.debug('sunset_max = ' + sunset_max);
// core.debug('max_azimuth_range = ' + max_azimuth_range);

//Setup Sunset/Sunrise Countdown
var suntime = suntimes(90.833);
// core.debug('sun_declin_deg: ' + suntime.sun_declin_deg);
// core.debug('solar_noon: ' + suntime.solar_noon);
// core.debug('sunup: ' + suntime.sunup);
// core.debug('sundown: ' + suntime.sundown);

function get_display_time() {
    current_time = new Date;
    //Update Sunrise/Sunset times after midnight.
    if (suntime.sundown.getDay() != current_time.getDay()) {
        suntime = suntimes(90.833);
    }
    seconds_till_sunset = Math.floor(suntime.sundown.getTime()/1000)-Math.floor((new Date()).getTime()/1000);
    seconds_till_sunrise = Math.floor(suntime.sunup.getTime()/1000)-Math.floor((new Date()).getTime()/1000);
    hours = (current_time.getHours()>12?current_time.getHours() - 12: current_time.getHours());
    minutes = current_time.getMinutes();
    seconds = current_time.getSeconds();
    display_time = (hours<10?(hours==0?"12":" "+hours):hours)+":"+(minutes<10?"0":"")+minutes;//+":"+seconds;
    return display_time;
}

function wait_till_next_tick(tick_length) {
    tick_length = (typeof tick_length !== 'undefined') ?  tick_length : 1;
    core.wait(tick_length);
}

function update_view() {
    core.selectObjectByName("Sun", false);
    sun = core.getSelectedObjectInfo();

    viewport_offset = 50 - (((sun["azimuth"] - sunrise_max)/max_azimuth_range)*100);
//    core.debug('viewport_offset = ' + viewport_offset);
    StelMovementMgr.setViewportHorizontalOffsetTarget(viewport_offset);
    StelMovementMgr.setViewportVerticalOffsetTarget(0);

//    core.moveToAltAzi(sun["altitude"], sun["azimuth"], 0);
    core.moveToAltAzi(7, sun["azimuth"], 0);
}

while (true) {
    update_view();
    //LabelMgr.labelHorizon("text", Azimuth, Altitude, visibility, font size, color);
    //LabelMgr.labelScreen("text", x, y, visibility, font size, color);
    seconds_till_sunset = Math.floor(suntime.sundown.getTime()/1000)-Math.floor((new Date()).getTime()/1000);
    seconds_till_sunrise = Math.floor(suntime.sunup.getTime()/1000)-Math.floor((new Date()).getTime()/1000);
    if (sun["altitude"] > -6) { //-6 is end of Civil Twilight
        time_day = LabelMgr.labelScreen(get_display_time(), -7, -33, visible, 280, "#FFFFFF", true, 1000);
    } else {
        time_night = LabelMgr.labelScreen(get_display_time(), -7, -33, visible, 280, "#1E73BE", true, 1000);
    }
    if (seconds_till_sunset > 0 && seconds_till_sunset < 60*60) {
        sunset_countdown = LabelMgr.labelScreen(Math.floor(seconds_till_sunset/60)+":"+((seconds_till_sunset % 60)<10?"0":"")+(seconds_till_sunset % 60), 0, 300, visible, 72, "#FFFFFF", true, 800);
    } 
    if (seconds_till_sunrise > 0 && seconds_till_sunrise < 60*60) {
        sunrise_countdown = LabelMgr.labelScreen(Math.floor(seconds_till_sunrise/60)+":"+((seconds_till_sunset % 60)<10?"0":"")+(seconds_till_sunset % 60), 600, 300, visible, 72, "#FFFFFF", true, 800);
    } 
    wait_till_next_tick();
}